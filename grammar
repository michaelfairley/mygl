variable_identifier:
IDENTIFIER

primary_expression:
variable_identifier
INTCONSTANT
UINTCONSTANT
FLOATCONSTANT
BOOLCONSTANT
LEFT_PAREN expression RIGHT_PAREN

postfix_expression:
primary_expression
postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET
function_call
postfix_expression DOT FIELD_SELECTION
postfix_expression INC_OP
postfix_expression DEC_OP
// FIELD_SELECTION includes fields in structures, component selection for vectors
// and the 'length' identifier for the length() method

integer_expression:
expression

function_call:
function_call_or_method

function_call_or_method:
function_call_generic

function_call_generic:
function_call_header_with_parameters RIGHT_PAREN
function_call_header_no_parameters RIGHT_PAREN

function_call_header_no_parameters:
function_call_header VOID
function_call_header

function_call_header_with_parameters:
function_call_header assignment_expression
function_call_header_with_parameters COMMA assignment_expression

function_call_header:
function_identifier LEFT_PAREN

// Grammar Note: Constructors look like functions, but lexical analysis recognized most of them as
// keywords. They are now recognized through “type_specifier”.
// Methods (.length) and identifiers are recognized through postfix_expression.

function_identifier:
type_specifier
postfix_expression

unary_expression:
postfix_expression
INC_OP unary_expression
DEC_OP unary_expression
unary_operator unary_expression

// Grammar Note: No traditional style type casts.

unary_operator:
PLUS
DASH
BANG
TILDE

// Grammar Note: No '*' or '&' unary ops. Pointers are not supported.

multiplicative_expression:
unary_expression
multiplicative_expression STAR unary_expression
multiplicative_expression SLASH unary_expression
multiplicative_expression PERCENT unary_expression

additive_expression:
multiplicative_expression
additive_expression PLUS multiplicative_expression
additive_expression DASH multiplicative_expression

shift_expression:
additive_expression
shift_expression LEFT_OP additive_expression
shift_expression RIGHT_OP additive_expression

relational_expression:
shift_expression
relational_expression LEFT_ANGLE shift_expression
relational_expression RIGHT_ANGLE shift_expression
relational_expression LE_OP shift_expression
relational_expression GE_OP shift_expression

equality_expression:
relational_expression
equality_expression EQ_OP relational_expression
equality_expression NE_OP relational_expression

and_expression:
equality_expression
and_expression AMPERSAND equality_expression

exclusive_or_expression:
and_expression
exclusive_or_expression CARET and_expression

inclusive_or_expression:
exclusive_or_expression
inclusive_or_expression VERTICAL_BAR exclusive_or_expression

logical_and_expression:
inclusive_or_expression
logical_and_expression AND_OP inclusive_or_expression

logical_xor_expression:
logical_and_expression
logical_xor_expression XOR_OP logical_and_expression

logical_or_expression:
logical_xor_expression
logical_or_expression OR_OP logical_xor_expression

conditional_expression:
logical_or_expression
logical_or_expression QUESTION expression COLON assignment_expression

assignment_expression:
conditional_expression
unary_expression assignment_operator assignment_expression

assignment_operator:
EQUAL
MUL_ASSIGN
DIV_ASSIGN
MOD_ASSIGN
ADD_ASSIGN
SUB_ASSIGN
LEFT_ASSIGN
RIGHT_ASSIGN
AND_ASSIGN
XOR_ASSIGN
OR_ASSIGN

expression:
assignment_expression
expression COMMA assignment_expression

constant_expression:
conditional_expression

* declaration:
function_prototype SEMICOLON
init_declarator_list SEMICOLON
PRECISION precision_qualifier type_specifier SEMICOLON
type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
 SEMICOLON
type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
 IDENTIFIER SEMICOLON
type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
 IDENTIFIER array_specifier SEMICOLON
type_qualifier SEMICOLON
type_qualifier IDENTIFIER SEMICOLON
type_qualifier IDENTIFIER identifier_list SEMICOLON

identifier_list:
COMMA IDENTIFIER
identifier_list COMMA IDENTIFIER

* function_prototype:
function_declarator RIGHT_PAREN

* function_declarator:
function_header
function_header_with_parameters

* function_header_with_parameters:
function_header parameter_declaration
function_header_with_parameters COMMA parameter_declaration

* function_header:
fully_specified_type IDENTIFIER LEFT_PAREN

* parameter_declarator:
type_specifier IDENTIFIER
type_specifier IDENTIFIER array_specifier

* parameter_declaration:
type_qualifier parameter_declarator
parameter_declarator
type_qualifier parameter_type_specifier
parameter_type_specifier

* parameter_type_specifier:
type_specifier

init_declarator_list:
single_declaration
init_declarator_list COMMA IDENTIFIER
init_declarator_list COMMA IDENTIFIER array_specifier
init_declarator_list COMMA IDENTIFIER array_specifier EQUAL initializer
init_declarator_list COMMA IDENTIFIER EQUAL initializer

single_declaration:
fully_specified_type
fully_specified_type IDENTIFIER
fully_specified_type IDENTIFIER array_specifier
fully_specified_type IDENTIFIER array_specifier EQUAL initializer
fully_specified_type IDENTIFIER EQUAL initializer

* fully_specified_type:
type_specifier
type_qualifier type_specifier

invariant_qualifier:
INVARIANT

interpolation_qualifier:
SMOOTH
FLAT

* layout_qualifier:
LAYOUT LEFT_PAREN layout_qualifier_id_list RIGHT_PAREN

* layout_qualifier_id_list:
layout_qualifier_id
layout_qualifier_id_list COMMA layout_qualifier_id

* layout_qualifier_id:
IDENTIFIER
IDENTIFIER EQUAL INTCONSTANT
IDENTIFIER EQUAL UINTCONSTANT
SHARED

precise_qualifier:
PRECISE

* type_qualifier:
single_type_qualifier
type_qualifier single_type_qualifier

* single_type_qualifier:
storage_qualifier
layout_qualifier
precision_qualifier
interpolation_qualifier
invariant_qualifier
precise_qualifier

* storage_qualifier:
CONST
IN
OUT
INOUT
CENTROID
PATCH
SAMPLE
UNIFORM
BUFFER
SHARED
COHERENT
VOLATILE
RESTRICT
READONLY
WRITEONLY

* type_specifier:
type_specifier_nonarray
type_specifier_nonarray array_specifier

* array_specifier:
LEFT_BRACKET RIGHT_BRACKET
LEFT_BRACKET constant_expression RIGHT_BRACKET
array_specifier LEFT_BRACKET RIGHT_BRACKET
array_specifier LEFT_BRACKET constant_expression RIGHT_BRACKET

* type_specifier_nonarray:
VOID
FLOAT
INT
UINT
BOOL
VEC2
VEC3
VEC4
BVEC2
BVEC3
BVEC4
IVEC2
IVEC3
IVEC4
UVEC2
UVEC3
UVEC4
MAT2
MAT3
MAT4
MAT2X2
MAT2X3
MAT2X4
MAT3X2
MAT3X3
MAT3X4
MAT4X2
MAT4X3
MAT4X4
ATOMIC_UINT
SAMPLER2D
SAMPLER3D
SAMPLERCUBE
SAMPLER2DSHADOW
SAMPLERCUBESHADOW
SAMPLER2DARRAY
SAMPLER2DARRAYSHADOW
SAMPLERBUFFER
SAMPLERCUBEARRAY
SAMPLERCUBEARRAYSHADOW
ISAMPLER2D
ISAMPLER3D
ISAMPLERCUBE
ISAMPLER2DARRAY
ISAMPLERBUFFER
ISAMPLERCUBEARRAY
USAMPLERCUBEARRAY
USAMPLER2D
USAMPLER3D
USAMPLERCUBE
USAMPLER2DARRAY
SAMPLER2DMS
ISAMPLER2DMS
USAMPLER2DMS
SAMPLER2DMSARRAY
ISAMPLER2DMSARRAY
USAMPLER2DMSARRAY
IMAGE2D
IIMAGE2D
UIMAGE2D
IMAGE3D
IIMAGE3D
UIMAGE3D
IMAGECUBE
IIMAGECUBE
UIMAGECUBE
IMAGE2DARRAY
IIMAGE2DARRAY
UIMAGE2DARRAY
IMAGEBUFFER
IIMAGEBUFFER
UIMAGEBUFFER
UIMAGECUBEARRAY
IMAGECUBEARRAY
IIMAGECUBEARRAY
struct_specifier
TYPE_NAME

precision_qualifier:
HIGH_PRECISION
MEDIUM_PRECISION
LOW_PRECISION

struct_specifier:
STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACE

* struct_declaration_list:
struct_declaration
struct_declaration_list struct_declaration

* struct_declaration:
type_specifier struct_declarator_list SEMICOLON
type_qualifier type_specifier struct_declarator_list SEMICOLON

* struct_declarator_list:
struct_declarator
struct_declarator_list COMMA struct_declarator

* struct_declarator:
IDENTIFIER
IDENTIFIER array_specifier

initializer:
assignment_expression

declaration_statement:
declaration

statement:
compound_statement
simple_statement

// Grammar Note: labeled statements for SWITCH only; 'goto' is not supported.

simple_statement:
declaration_statement
expression_statement
selection_statement
switch_statement
case_label
iteration_statement
jump_statement

* compound_statement:
LEFT_BRACE RIGHT_BRACE
LEFT_BRACE statement_list RIGHT_BRACE

* statement_list:
statement
statement_list statement

expression_statement:
SEMICOLON
expression SEMICOLON

selection_statement:
IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement

selection_rest_statement:
statement ELSE statement
statement

condition:
expression
fully_specified_type IDENTIFIER EQUAL initializer

switch_statement:
SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE switch_statement_list
 RIGHT_BRACE

switch_statement_list:
/* nothing */
statement_list

case_label:
CASE expression COLON
DEFAULT COLON

iteration_statement:
WHILE LEFT_PAREN condition RIGHT_PAREN statement
DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON
FOR LEFT_PAREN for_init_statement for_rest_statement RIGHT_PAREN
 statement

for_init_statement:
expression_statement
declaration_statement

conditionopt:
condition
/* empty */

for_rest_statement:
conditionopt SEMICOLON
conditionopt SEMICOLON expression

jump_statement:
CONTINUE SEMICOLON
BREAK SEMICOLON
RETURN SEMICOLON
RETURN expression SEMICOLON
DISCARD SEMICOLON // Fragment shader only.

* translation_unit:
external_declaration
translation_unit external_declaration

* external_declaration:
function_definition
declaration

* function_definition:
function_prototype compound_statement
